#!/usr/bin/env escript
%% -*- mode: erlang -*-
%%! -smp auto
-module(mcu_emul).

-define(info(Msg), io:format("INFO: " ++ Msg)).
-define(info(Msg, Data), io:format("INFO: " ++ Msg, Data)).

-define(error(Msg), io:format("ERROR: " ++ Msg)).
-define(error(Msg, Data), io:format("ERROR: " ++ Msg, Data)).

-define(deps, ["getopt"]).

-define(argspec, [
		  {help,    $h,        "help",    undefined,           "Show help"},
		  {num,     $n,        "num",     {integer, 1},        "MCU number"},
		  {pty,     undefined, undefined, string,              "Path to pty"}
		 ]).

main(Args) ->
    set_paths(),
    case getopt:parse(?argspec, Args) of
	{ok, {Opts, []}} ->
	    case proplists:get_bool(help, Opts) of
		true ->
		    getopt:usage(?argspec, atom_to_list(?MODULE)),
		    halt(0);
		false ->
		    start(Opts)
	    end;
	_ ->
	    getopt:usage(?argspec, atom_to_list(?MODULE)),
	    halt(1)
    end.

%%%
%%% Priv
%%%
start(Opts) ->
    case proplists:get_value(pty, Opts) of
	undefined ->
	    getopt:usage(?argspec, atom_to_list(?MODULE)),
	    halt(0);
	Pty ->
	    ?info("Opening ~p~n", [Pty]),
	    To = open_port({spawn, "/bin/cat > " ++ Pty}, 
			   [binary, out, {line, 80}]),
	    From = open_port({spawn, "/bin/cat " ++ Pty},
			     [binary, in, {line, 80}]),
	    loop(From, To, proplists:get_value(num, Opts), <<>>)
    end.

loop(From, To, N, Acc) ->
    receive
	{From, {data, {noeol, Bin}}} ->
	    loop(From, To, N, << Acc/binary, Bin/binary >>);
	{From, {data, {eol, Bin}}} ->
	    handle_msg(bkfw_parser:parse_query(<< Acc/binary, Bin/binary >>), To, N),
	    loop(From, To, N, <<>>);
	_Else ->
	    ?error("received: ~p~n", [_Else]),
	    loop(From, To, N, Acc)
    end.

handle_msg({error, Err}, To, N) ->
    ?error("parse error: ~p~n", [Err]);
handle_msg(eof, To, N) ->
    ok;
handle_msg({ok, Addr, Cmd, Args}, To, N) ->
    ?info("@~p ~p(~p)~n", [Addr, Cmd, Args]).

set_paths() ->
    Root = get_root(),
    Deps = lists:map(fun(D) -> 
			     Root ++ "/deps/" ++ D ++ "/ebin"
		     end, ?deps),
    code:add_pathsa([ Root ++ "/ebin" | Deps ]).

get_root() ->
    AbsName = filename:join(get_cwd(), escript:script_name()),
    [ _, _ | Root ] = lists:reverse(filename:split(AbsName)),
    filename:join(lists:reverse(Root)).

get_cwd() ->
    case file:get_cwd() of
	{ok, Dir} ->
	    Dir;
	{error, Reason} ->
	    ?error("Unable to get cwd: ~p~n", [Reason]),
	    halt(1)
    end.
