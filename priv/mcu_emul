#!/usr/bin/env escript
%% -*- mode: erlang -*-
%%! -smp auto
-module(mcu_emul).

-define(info(Msg), io:format("INFO: " ++ Msg)).
-define(info(Msg, Data), io:format("INFO: " ++ Msg, Data)).

-define(debug(Msg), io:format("DEBUG: " ++ Msg)).
-define(debug(Msg, Data), io:format("DEBUG: " ++ Msg, Data)).

-define(error(Msg), io:format("ERROR: " ++ Msg)).
-define(error(Msg, Data), io:format("ERROR: " ++ Msg, Data)).

-define(deps, ["getopt", "cereal"]).

-define(argspec, [
		  {help,    $h,        "help",    undefined,            "Show help"},
		  {slots,   $s,        "slots",   {string, "00000001"}, "MCU slots (8 chars hex)"},
		  {pty,     undefined, undefined, string,               "Path to pty"}
		 ]).

-define(WAIT, true).
%-define(WAIT, timer:sleep(100)).

main(Args) ->
    set_paths(),
    case getopt:parse(?argspec, Args) of
	{ok, {Opts, []}} ->
	    case proplists:get_bool(help, Opts) of
		true ->
		    getopt:usage(?argspec, atom_to_list(?MODULE)),
		    halt(0);
		false ->
		    start(Opts)
	    end;
	_ ->
	    getopt:usage(?argspec, atom_to_list(?MODULE)),
	    halt(1)
    end.

%%%
%%% Priv
%%%
start(Opts) ->
    case proplists:get_value(pty, Opts) of
	undefined ->
	    getopt:usage(?argspec, atom_to_list(?MODULE)),
	    halt(0);
	Pty ->
	    ?info("Opening ~p~n", [Pty]),
	    {ok, Fd} = cereal:open_tty(Pty),
	    ok = cereal:set_raw_tty_mode(Fd),
	    Port = open_port({fd, Fd, Fd}, [binary, stream, {line, 80}]),
	    Slots = list_to_binary(proplists:get_value(slots, Opts)),
	    ?info("Slots: ~.2b~n", [binary_to_integer(Slots, 16)]),
	    loop(Port, Slots, <<>>)
    end.


loop(Port, Slots, Acc) ->
    receive
	{Port, {data, {noeol, Bin}}} ->
	    loop(Port, Slots, << Acc/binary, Bin/binary >>);
	{Port, {data, {eol, Bin}}} ->
	    Msg = << Acc/binary, Bin/binary >>,
	    ?debug("received: ~p~n", [Msg]),
	    handle_msg(bkfw_parser:parse(Msg), Slots, Port),
	    loop(Port, Slots, <<>>);
	_Else ->
	    ?error("received: ~p~n", [_Else]),
	    loop(Port, Slots, Acc)
    end.

handle_msg({error, Err}, _Slots, _To) ->
    ?error("parse error: ~s~n", [Err]);
handle_msg(eof, _Slots, _To) ->
    ok;
handle_msg({ok, {Addr, rcc, [Pos]}}, _Slots, To) when is_integer(Pos) ->
    reply(To, Addr, io_lib:format("CC ~p ~.2f mA", [Pos, 1230.32]));
handle_msg({ok, {Addr, scc, [Pos, Cur]}}, _Slots, To) when is_integer(Pos), is_float(Cur) ->
    reply(To, Addr, io_lib:format("SCC ~p ~.2f", [Pos, Cur]));
handle_msg({ok, {Addr, rgc, []}}, _Slots, To) ->
    reply(To, Addr, "GC 42.11 dB");
handle_msg({ok, {Addr, sgc, [Gain]}}, _Slots, To) when is_float(Gain) ->
    reply(To, Addr, io_lib:format("SGC ~.2f", [Gain]));
handle_msg({ok, {Addr, rpc, []}}, _Slots, To) ->
    reply(To, Addr, "PC 12.57 dBm");
handle_msg({ok, {Addr, spc, [Pow]}}, _Slots, To) ->
    reply(To, Addr, io_lib:format("SPC ~.2f", [Pow]));
handle_msg({ok, {Addr, rmode, []}}, _Slots, To) ->
    reply(To, Addr, "MODE CC");
handle_msg({ok, {Addr, smode, [Mode]}}, _Slots, To) when Mode == "PC";
							 Mode == "GC";
							 Mode == "CC";
							 Mode == "OFF" ->
    reply(To, Addr, ["SMODE ", Mode]);
handle_msg({ok, {Addr, ra, []}}, _Slots, To) ->
    reply(To, Addr, "ALARMS: PUMP_TEMP BREF");
handle_msg({ok, {Addr, rlt, [Pos]}}, _Slots, To) when is_integer(Pos) ->
    reply(To, Addr, io_lib:format("LT ~p ~.2f C", [Pos, 89.99]));
handle_msg({ok, {Addr, rlc, [Pos]}}, _Slots, To) when is_integer(Pos) ->
    reply(To, Addr, io_lib:format("LC ~p ~.2f mA", [Pos, 234.32]));
handle_msg({ok, {Addr, rit, []}}, _Slots, To) ->
    reply(To, Addr, "IT 43.12 C");
handle_msg({ok, {Addr, ri, []}}, _Slots, To) ->
    reply(To, Addr, ["Vendor= Bktel Photonics\r\n",
		     "Module= blop\r\n",
		     "HW Ver= 0\r\n",
		     "HW Rev= A\r\n",
		     "SW Ver= 0.01\r\n",
		     "FW Ver= 0.01\r\n",
		     "Part Num= 123456\r\n",
		     "Ser. Num= 20141101001\r\n",
		     "Prod. Date= 20141101\r\n"]);
handle_msg({ok, {Addr, rpm, []}}, _Slots, To) ->
    reply(To, Addr, ["PD1 12.34 dBm\r\n",
		     "PD2 23.45 dBm\r\n"]);
handle_msg({ok, {Addr, rv, []}}, _Slots, To) ->
    reply(To, Addr, "V 24.0 V");
handle_msg({ok, {Addr, rli, []}}, _Slots, To) ->
    reply(To, Addr, "LI 89.01 dBm");
handle_msg({ok, {Addr, sli, [Pow]}}, _Slots, To) when is_float(Pow) ->
    reply(To, Addr, io_lib:format("SLI ~.2f", [Pow]));
handle_msg({ok, {Addr, rlo, []}}, _Slots, To) ->
    reply(To, Addr, "LO 12.78 dBm");
handle_msg({ok, {Addr, slo, [Loss]}}, _Slots, To) when is_float(Loss) ->
    reply(To, Addr, io_lib:format("SLO ~.2f", [Loss]));
handle_msg({ok, {Addr, rn, []}}, Slots, To) ->
    reply(To, Addr, ["N 0x", Slots]);
handle_msg({ok, {Addr, Cmd, Args}}, _Slots, To) ->
    ?error("Invalid command: ~p(~p)~n", [Cmd, Args]),
    reply(To, Addr, "INVALID CMD").


reply(To, Addr, Ans) ->
    ?WAIT,
    HexAddr = ["0x", io_lib:format("~2.16.0b", [Addr])],
    Msg = iolist_to_binary([HexAddr, " ", Ans, "\r\n"]),
    ?debug("replying: ~p~n", [Msg]),
    To ! {self(), {command, Msg}}.


set_paths() ->
    Root = get_root(),
    Deps = lists:map(fun(D) -> 
			     Root ++ "/deps/" ++ D ++ "/ebin"
		     end, ?deps),
    code:add_pathsa([ Root ++ "/ebin" | Deps ]).

get_root() ->
    AbsName = filename:join(get_cwd(), escript:script_name()),
    [ _, _ | Root ] = lists:reverse(filename:split(AbsName)),
    filename:join(lists:reverse(Root)).

get_cwd() ->
    case file:get_cwd() of
	{ok, Dir} ->
	    Dir;
	{error, Reason} ->
	    ?error("Unable to get cwd: ~p~n", [Reason]),
	    halt(1)
    end.
